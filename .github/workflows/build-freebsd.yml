name: Build FreeBSD Dashboard

on:
  schedule:
    - cron: '1 16 * * *'    # UTC 16:01, 即北京时间 00:01
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get latest tags
        id: get_tags    # 添加 step id
        run: |
          # 尝试获取当前仓库的最新 release tag
          CURRENT_REPO_TAG=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // empty')
          
          # 获取 Nezha 最新 release tag
          NEZHA_LATEST_TAG=$(curl -sL "https://api.github.com/repos/naiba/nezha/releases/latest" | jq -r '.tag_name // empty')
          
          # 添加调试信息
          echo "Debug: Checking release info..."
          echo "Current repo tag: ${CURRENT_REPO_TAG}"
          echo "Nezha latest tag: ${NEZHA_LATEST_TAG}"
          
          if [ -z "$NEZHA_LATEST_TAG" ]; then
            echo "Error: Could not get Nezha latest tag"
            exit 1
          fi
          
          # 使用 GitHub Actions 的输出语法
          echo "nezha_tag=${NEZHA_LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "NEZHA_LATEST_TAG=${NEZHA_LATEST_TAG}" >> $GITHUB_ENV
          echo "CURRENT_REPO_TAG=${CURRENT_REPO_TAG}" >> $GITHUB_ENV

      - name: Compare tags
        run: |
          if [ -z "${{ env.CURRENT_REPO_TAG }}" ] || [ "${{ env.CURRENT_REPO_TAG }}" != "${{ env.NEZHA_LATEST_TAG }}" ]; then
            echo "TRIGGER_BUILD=true" >> $GITHUB_ENV
            echo "Building for new version ${NEZHA_LATEST_TAG}"
          else
            echo "TRIGGER_BUILD=false" >> $GITHUB_ENV
            echo "Already up to date with version ${NEZHA_LATEST_TAG}"
          fi

      - name: Setup and Build in FreeBSD VM
        if: env.TRIGGER_BUILD == 'true'
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          sync: rsync
          copyback: true
          prepare: |
            pkg install -y go git wget unzip
            go install github.com/swaggo/swag/cmd/swag@latest
          run: |
            # 在开始时输出版本号确认
            export PATH=./:$PATH:/root/go/bin
            
            # Clone Nezha repository
            git clone -b ${{ env.NEZHA_LATEST_TAG }} https://github.com/nezhahq/nezha.git
            cd nezha
            echo "now path is $(pwd)"
            
            # Initialize go module and get dependencies
            go mod init github.com/nezhahq/nezha >/dev/null
            go mod tidy >/dev/null
            
            # Download and setup admin frontend first
            echo "Setting up admin frontend..."
            ADMIN_RELEASE_URL=$(curl -s https://api.github.com/repos/nezhahq/admin-frontend/releases/latest | grep "browser_download_url.*dist.zip" | cut -d '"' -f 4)
            wget -O admin-dist.zip "$ADMIN_RELEASE_URL"
            mkdir -p ./cmd/dashboard/admin-dist
            unzip admin-dist.zip -d temp
            mv temp/dist/* ./cmd/dashboard/admin-dist/
            rm -rf temp admin-dist.zip
            
            # Download and setup user frontend
            echo "Setting up user frontend..."
            USER_RELEASE_URL=$(curl -s https://api.github.com/repos/hamster1963/nezha-dash-v1/releases/latest | grep "browser_download_url.*dist.zip" | cut -d '"' -f 4)
            wget -O user-dist.zip "$USER_RELEASE_URL"
            mkdir -p ./cmd/dashboard/user-dist
            unzip user-dist.zip -d temp
            mv temp/dist/* ./cmd/dashboard/user-dist/
            rm -rf temp user-dist.zip
            
            # Download GeoIP database
            rm -rf ./pkg/geoip/geoip.db
            wget -qO ./pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${{ secrets.IPINFO_TOKEN }}

            # Now generate API docs
            echo "Generating API docs..."
            cd cmd/dashboard
            echo "Generating docs from $(pwd)"
            ls
            if ! swag init --pd -d ./ -g main.go -o docs --parseGoList=false; then
              echo "Failed to generate API docs"
              exit 1
            fi
            echo "API docs generated successfully"
            
            # Verify docs directory exists and contains files
            if [ ! -d "./docs" ] || [ ! -f "./docs/docs.go" ]; then
              echo "Docs directory was not created"
              exit 1
            fi
            cd ../..  # 回到项目根目录
            
            # Build dashboard
            cd cmd/dashboard
            echo "Build now path is $(pwd)"
            go mod tidy >/dev/null
            go build -ldflags "-s -w -X github.com/nezhahq/nezha/service/singleton.Version=${{ env.NEZHA_LATEST_TAG }}" -trimpath -buildvcs=false
            
            # Compress dashboard binary and commit
            gzip -c dashboard > dashboard.gz
            
            # Move the file to the workspace
            echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
            cp dashboard.gz ${GITHUB_WORKSPACE}/

      - name: Create Release
        if: env.TRIGGER_BUILD == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEZHA_LATEST_TAG }}
          name: "FreeBSD nezha-Dashboard ${{ env.NEZHA_LATEST_TAG }}"
          files: |
            dashboard.gz
          body: |
            FreeBSD nezha-dashboard binary for Nezha ${{ env.NEZHA_LATEST_TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true    # 自动生成发布说明
          fail_on_unmatched_files: true   # 如果文件不存在则失败
          token: ${{ secrets.GITHUB_TOKEN }}  # 明确指定 token
          repository: ${{ github.repository }} # 明确指定仓库
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup_runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3        

permissions:
  contents: write      # 用于创建 release
  actions: write      # 用于管理工作流运行记录
  checks: write       # 用于更新检查运行状态
  deployments: write  # 用于部署
  issues: write       # 用于管理 issues
  packages: write     # 用于管理包
  pull-requests: write # 用于管理 PR
  repository-projects: write  # 用于管理项目
  security-events: write     # 用于管理安全事件
  statuses: write           # 用于更新状态
  